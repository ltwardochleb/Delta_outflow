library(tidyverse)
library(lubridate)
library(here)
library(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# Define file path in the repository for figure and table outputs
fp_output <- here("figs_tables")
# Define file path in the repository for dayflow data
fp_outflow <- here("data")
# Import data
outflow_1996 <- read_csv(file.path(fp_outflow, "dayflow-results-1984-1996.csv"))
outflow_2020 <- read_csv(file.path(fp_outflow, "dayflow-results-1997-2020.csv"))
#Combine and manipulate datasets
outflow<-full_join(outflow_1996, outflow_2020)%>%
mutate(EXPORTS=ifelse(is.na(EXPORT), EXPORTS, EXPORT))%>% #combine export columns with different names
#select(-c(DIVER, EFFEC, EFFDIV))%>% #remove unneeded columns
mutate(Season=case_when(Month%in%1:6 ~ "Winter_Spring", # Create seasonal variables
Month%in%7:12 ~ "Summer_Fall",
TRUE ~ NA_character_))%>%
group_by(Year, Season)%>% #create seasonal summaries of delta outflow, exports
mutate(seasonal_export=mean(EXPORTS))%>%
mutate(seasonal_outflow=mean(OUT))%>%
unite('year_season', c(Year, Season), remove=FALSE)%>% #create new variable defining year and season
mutate(upper_bookend=case_when(seasonal_outflow>=47000 ~ 1,
seasonal_outflow<47000 ~ 0))%>%#identify year_season above 47,000 cfs
mutate(lower_bookend=case_when(seasonal_outflow>=29200 ~ 1,
seasonal_outflow<29200 ~ 0))#identify year_season above 29,200 cfs
#visually assess stationarity of exports over last 20-30 years
outflow%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_export))
#assess stationarity of exports using Dickey-Fuller test
library(tseries)
adf.test(outflow$EXPORTS) #exports time series is stationary
#examine stationarity of delta outflows
outflow%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
adf.test(outflow$OUT) #Delta outflow is also stationary
#examine data from seasons with outflow thresholds above 29,200 cfs and 47,000 cfs as bookends in winter_spring (jan-june period)
outflow%>%filter(Season=="Winter_Spring")%>%filter(seasonal_outflow>=29200&47000)%>%
ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
#examine all years
outflow%>%filter(Season=="Winter_Spring")%>%
ggplot()+geom_point(aes(x=OUT, y=seasonal_outflow))
#logistic regression for lower bookend
spring_outflow<-outflow%>%filter(Season=="Winter_Spring")
lower_bookend<-glm(lower_bookend~OUT, family="binomial", data=spring_outflow)
lower_bookend
summary(lower_bookend)
plot(lower_bookend)
#assess model fit
library(DescTools)
HosmerLemeshowTest(fit=fitted(lower_bookend),
obs=spring_outflow$lower_bookend) #indicates poor fit
library(DHARMa)
#see: https://cran.r-project.org/web/packages/DHARMa/vignettes/DHARMa.html
testDispersion(lower_bookend)
simres_lower <- simulateResiduals(lower_bookend)
plot(simres_lower)
hist(spring_outflow$lower_bookend)
#what are the outflow values that get you 29,200 cfs of outflow?
LD50=-lower_bookend$coefficients[1]/lower_bookend$coefficients[2]
LD75= (log(.75/(1-.75))-lower_bookend$coefficients[1])/lower_bookend$coefficients[2]
LD99= (log(.99/(1-.99))-lower_bookend$coefficients[1])/lower_bookend$coefficients[2]
#define function to calculate LD values
LDfunc <- function(x, y, z){
(log(x/(1-x))-y)/z
}
#calculate LD values for 1 to 99 for lower bookend
LD<-list(seq(from=0.10, to=0.99, length.out=90))
LDs_lower_bookend<-mapply(LDfunc, x=LD, y=lower_bookend$coefficients[1], z=lower_bookend$coefficients[2])
#logistic regression for upper bookend
upper_bookend<-glm(upper_bookend~OUT, family="binomial", data=spring_outflow)
upper_bookend
summary(upper_bookend)
#assess model fit
HosmerLemeshowTest(fit=fitted(lower_bookend),
obs=spring_outflow$lower_bookend)
simres_upper <- simulateResiduals(upper_bookend)
plot(simres_upper)
hist(spring_outflow$upper_bookend) #zero inflation?
#calculate LD values for 1 to 99 for upper bookend
LD50upper=-upper_bookend$coefficients[1]/upper_bookend$coefficients[2]
LDs_upper_bookend<-mapply(LDfunc, x=LD, y=upper_bookend$coefficients[1], z=upper_bookend$coefficients[2])
#bind the lists together into a dataframe of upper and lower bookend LDs
LD_upper_lower<-as.data.frame(cbind(LDs_lower_bookend, LDs_upper_bookend, unlist(LD)))
colnames(LD_upper_lower)<-c("lower_bookend", "upper_bookend", "percent")
#plot modeled data- lower bookend
lower_plot<-ggplot(spring_outflow, aes(x=OUT, y=lower_bookend)) + geom_point() +
stat_smooth(method="glm", color="blue", se=FALSE,
method.args = list(family=binomial))
#plot LD data- lower bookend
LD_lower_plot<-ggplot(LD_upper_lower, aes(x=lower_bookend, y=percent)) + geom_point() +
stat_smooth(method="glm", color="blue", se=FALSE,
method.args = list(family=binomial))+
geom_vline(xintercept=31291.9096,linetype=2)+
geom_vline(xintercept=46598.3098,linetype=2)+
ylab("Percent")+xlab("Daily avg. flow (cfs)")
#plot modeled data- upper bookend
upper_plot<-ggplot(spring_outflow, aes(x=OUT, y=upper_bookend)) + geom_point() +
stat_smooth(method="glm", color="blue", se=FALSE,
method.args = list(family=binomial))
#plot LD data- upper bookend
LD_upper_plot<-ggplot(LD_upper_lower, aes(x=upper_bookend, y=percent)) + geom_point() +
stat_smooth(method="glm", color="blue", se=FALSE,
method.args = list(family=binomial))+
geom_vline(xintercept=65973.43,linetype=2)+
geom_vline(xintercept=93414.52,linetype=2)+
ylab("Percent")+xlab("Daily avg. flow (cfs)")
upper_plot
LD_lower_plot
LD_upper_plot
View(outflow)
plot(phobtest1_simres)
phobtest1_simres <- simulateResiduals(phobtest1)
plot(simres_upper)
plot(simres_lower)
hist(spring_outflow$lower_bookend)
testZeroInflation(simres_lower)
#calculate LD values for 1 to 99 for upper bookend
LD50upper=-upper_bookend$coefficients[1]/upper_bookend$coefficients[2]
testZeroInflation(simres_upper)
#logistic regression for lower bookend
spring_outflow<-outflow%>%filter(Season=="Winter_Spring")%>%filter(seasonal_outflow>=29200)
#logistic regression for upper bookend
upper_bookend<-glm(upper_bookend~OUT, family="binomial", data=spring_outflow)
upper_bookend
summary(upper_bookend)
#assess model fit
HosmerLemeshowTest(fit=fitted(lower_bookend),
obs=spring_outflow$lower_bookend)
#assess model fit
HosmerLemeshowTest(fit=fitted(upper_bookend),
obs=spring_outflow$upper_bookend)
simres_upper <- simulateResiduals(upper_bookend)
plot(simres_upper)
hist(spring_outflow$upper_bookend) #zero inflation?
#calculate LD values for 1 to 99 for upper bookend
LD50upper=-upper_bookend$coefficients[1]/upper_bookend$coefficients[2]
#logistic regression for lower bookend
spring_outflow<-outflow%>%filter(Season=="Winter_Spring")%>%filter(seasonal_outflow>=1000)
#logistic regression for lower bookend
spring_outflow<-outflow%>%filter(Season=="Winter_Spring")%>%filter(seasonal_outflow>=10000)
#logistic regression for upper bookend
upper_bookend<-glm(upper_bookend~OUT, family="binomial", data=spring_outflow)
upper_bookend
summary(upper_bookend)
simres_upper <- simulateResiduals(upper_bookend)
plot(simres_upper)
hist(spring_outflow$upper_bookend)
#calculate LD values for 1 to 99 for upper bookend
LD50upper=-upper_bookend$coefficients[1]/upper_bookend$coefficients[2]
plot(lower_bookend)
View(outflow)
#logistic regression for lower bookend
spring_outflow<-outflow%>%filter(Season=="Winter_Spring")
library(tidyverse)
library(lubridate)
library(here)
library(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# Define file path in the repository for figure and table outputs
fp_output <- here("figs_tables")
# Define file path in the repository for dayflow data
fp_outflow <- here("data")
# 2. Import and Prepare Data --------------------------------------------------
# Import data
outflow_1996 <- read_csv(file.path(fp_outflow, "dayflow-results-1984-1996.csv"))
outflow_2020 <- read_csv(file.path(fp_outflow, "dayflow-results-1997-2020.csv"))
#Combine and manipulate datasets
outflow<-full_join(outflow_1996, outflow_2020)%>%
mutate(EXPORTS=ifelse(is.na(EXPORT), EXPORTS, EXPORT))%>% #combine export columns with different names
#select(-c(DIVER, EFFEC, EFFDIV))%>% #remove unneeded columns
mutate(Season=case_when(Month%in%1:6 ~ "Winter_Spring", # Create seasonal variables
Month%in%7:12 ~ "Summer_Fall",
TRUE ~ NA_character_))%>%
group_by(Year, Season)%>% #create seasonal summaries of delta outflow, exports
mutate(seasonal_export=mean(EXPORTS))%>%
mutate(seasonal_outflow=mean(OUT))%>%
unite('year_season', c(Year, Season), remove=FALSE)%>% #create new variable defining year and season
mutate(upper_bookend=case_when(seasonal_outflow>=47000 ~ 1,
seasonal_outflow<47000 ~ 0))%>%#identify year_season above 47,000 cfs
mutate(lower_bookend=case_when(seasonal_outflow>=29200 ~ 1,
seasonal_outflow<29200 ~ 0))#identify year_season above 29,200 cfs
# 3. Explore distributions of outflow, exports over time --------------------------------------------------
#visually assess stationarity of exports over last 20-30 years
outflow%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_export))
#assess stationarity of exports using Dickey-Fuller test
library(tseries)
adf.test(outflow$EXPORTS) #exports time series is stationary
#examine stationarity of delta outflows
outflow%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
adf.test(outflow$OUT) #Delta outflow is also stationary
#examine data from seasons with outflow thresholds above 29,200 cfs and 47,000 cfs as bookends in winter_spring (jan-june period)
outflow%>%filter(Season=="Winter_Spring")%>%filter(seasonal_outflow>=29200&47000)%>%
ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
#examine all yearsfilter(seasonal_outflow>=29200)
ggplot()+geom_point(aes(x=OUT, y=seasonal_outflow))
library(tidyverse)
library(lubridate)
library(here)
library(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# Define file path in the repository for figure and table outputs
fp_output <- here("figs_tables")
# Define file path in the repository for dayflow data
fp_outflow <- here("data")
# Import data
outflow_1996 <- read_csv(file.path(fp_outflow, "dayflow-results-1984-1996.csv"))
outflow_2020 <- read_csv(file.path(fp_outflow, "dayflow-results-1997-2020.csv"))
#Combine and manipulate datasets
outflow<-full_join(outflow_1996, outflow_2020)%>%
mutate(EXPORTS=ifelse(is.na(EXPORT), EXPORTS, EXPORT))%>% #combine export columns with different names
#select(-c(DIVER, EFFEC, EFFDIV))%>% #remove unneeded columns
mutate(Season=case_when(Month%in%1:6 ~ "Winter_Spring", # Create seasonal variables
Month%in%7:12 ~ "Summer_Fall",
TRUE ~ NA_character_))%>%
group_by(Year, Season)%>% #create seasonal summaries of delta outflow, exports
mutate(seasonal_export=mean(EXPORTS))%>%
mutate(seasonal_outflow=mean(OUT))%>%
unite('year_season', c(Year, Season), remove=FALSE)%>% #create new variable defining year and season
mutate(upper_bookend=case_when(seasonal_outflow>=47000 ~ 1,
seasonal_outflow<47000 ~ 0))%>%#identify year_season above 47,000 cfs
mutate(lower_bookend=case_when(seasonal_outflow>=29200 ~ 1,
seasonal_outflow<29200 ~ 0))#identify year_season above 29,200 cfs
#visually assess stationarity of exports over last 20-30 years
outflow%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_export))
#assess stationarity of exports using Dickey-Fuller test
library(tseries)
adf.test(outflow$EXPORTS) #exports time series is stationary
#examine stationarity of delta outflows
outflow%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
adf.test(outflow$OUT) #Delta outflow is also stationary
#examine data from seasons with outflow thresholds above 29,200 cfs and 47,000 cfs as bookends in winter_spring (jan-june period)
outflow%>%filter(Season=="Winter_Spring")%>%filter(seasonal_outflow>=29200&47000)%>%
ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
#examine all yearsfilter(seasonal_outflow>=29200)
ggplot()+geom_point(aes(x=OUT, y=seasonal_outflow))
#examine all years
outflow%>%filter(Season=="Winter_Spring")%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
#logistic regression for lower bookend
spring_outflow<-outflow%>%filter(Season=="Winter_Spring")
lower_bookend<-glm(lower_bookend~OUT, family="binomial", data=spring_outflow)
lower_bookend
summary(lower_bookend)
plot(lower_bookend)
View(spring_outflow)
library(DHARMa)
#see: https://cran.r-project.org/web/packages/DHARMa/vignettes/DHARMa.html
testDispersion(lower_bookend)
simres_lower <- simulateResiduals(lower_bookend)
plot(simres_lower)
#logistic regression for upper bookend
upper_bookend<-glm(upper_bookend~OUT, family="binomial", data=spring_outflow)
upper_bookend
summary(upper_bookend)
u
simres_upper <- simulateResiduals(upper_bookend)
plot(simres_upper)
plot(upper_bookend)
plot(simres_upper)
plot(lower_bookend) #potentially a few outliers
#try re-running the model without the outliers
springoutflow2<-spring_outflow[,-5874:5876]
#try re-running the model without the outliers
springoutflow2<-spring_outflow[,-c(5874:5876)]
#logistic regression for lower bookend
spring_outflow<-outflow%>%filter(Season=="Winter_Spring")
#try re-running the model without the outliers
springoutflow2<-spring_outflow[-c(5874:5876),]
lower_bookend2<-glm(lower_bookend2~OUT, family="binomial", data=spring_outflow)
lower_bookend2<-glm(lower_bookend~OUT, family="binomial", data=springoutflow2)
lower_bookend2
summary(lower_bookend2)
plot(lower_bookend2) #potentially a few outliers
simres_lower2 <- simulateResiduals(lower_bookend2)
plot(simres_lower2) #also shows a few outliers
LD50.2=-lower_bookend2$coefficients[1]/lower_bookend2$coefficients[2]
LD75.2= (log(.75/(1-.75))-lower_bookend2$coefficients[1])/lower_bookend2$coefficients[2]
LD99.2= (log(.99/(1-.99))-lower_bookend2$coefficients[1])/lower_bookend2$coefficients[2]
#examine all years
outflow%>%filter(Season=="Winter_Spring")%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
outflow%>%filter(Season=="Winter_Spring")%>%ggplot()+geom_point(aes(x=OUT, y=seasonal_outflow))
#examine data from seasons with outflow thresholds above 29,200 cfs and 47,000 cfs as bookends in winter_spring (jan-june period)
outflow%>%filter(Season=="Winter_Spring")%>%filter(seasonal_outflow>=29200&47000)%>%
ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
#examine all years in winter and spring
outflow%>%filter(Season=="Winter_Spring")%>%ggplot()+geom_point(aes(x=year_season, y=seasonal_outflow))
outflow%>%filter(Season=="Winter_Spring")%>%ggplot()+geom_point(aes(x=OUT, y=seasonal_outflow))
tinytex::install_tinytex()
library(tidyverse)
library(lubridate)
library(here)
library(readxl)
library(rlang)
#2. Read in and manipulate the data summarized by year and site------------------------------------------------------------------------------------------------------------------------------
hydrophob<-read_csv("hydrophobicity.csv") #data summarized by year and site
library(tidyverse)
library(lubridate)
library(here)
library(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# Define file path in the repository for figure and table outputs
fp_output <- here("figs_tables")
# Define file path in the repository for dayflow data
fp_outflow <- here("data")
outflow_1996 <- read_csv(file.path(fp_outflow, "dayflow-results-1984-1996.csv"))
outflow_2020 <- read_csv(file.path(fp_outflow, "dayflow-results-1997-2020.csv"))
outflow<-full_join(outflow_1996, outflow_2020)%>%
mutate(EXPORTS=ifelse(is.na(EXPORT), EXPORTS, EXPORT))%>% #combine export columns with different names
#select(-c(DIVER, EFFEC, EFFDIV))%>% #remove unneeded columns
mutate(Season=case_when(Month%in%1:6 ~ "Winter_Spring", # Create seasonal variables
Month%in%7:12 ~ "Summer_Fall",
TRUE ~ NA_character_))%>%
group_by(Year, Season)%>% #create seasonal summaries of delta outflow, exports
mutate(seasonal_export=mean(EXPORTS))%>%
mutate(seasonal_outflow=mean(OUT))%>%
unite('year_season', c(Year, Season), remove=FALSE)%>% #create new variable defining year and season
mutate(upper_bookend=case_when(seasonal_outflow>=47000 ~ 1,
seasonal_outflow<47000 ~ 0))%>%#identify year_season above 47,000 cfs
mutate(lower_bookend=case_when(seasonal_outflow>=29200 ~ 1,
seasonal_outflow<29200 ~ 0))#identify year_season above 29,200 cfs
View(outflow)
usethis::create_from_github(
"https://github.com/ltwardochleb/Delta_outflow.git",
destdir = "~/Documents/Sac_Delta_analyses/Delta_outflow/Delta_outflow/"
)
usethis::create_from_github(
"https://github.com/ltwardochleb/Delta_outflow.git",
destdir = "~/Documents/Sac_Delta_analyses/")
usethis::create_from_github(
"https://github.com/ltwardochleb/Delta_outflow.git",
destdir = "~/Documents/Delta_outflow_analyses/"
)
usethis::create_from_github(
"https://github.com/ltwardochleb/Delta_outflow.git",
destdir = "~/Documents/Sac_Delta_analyses/Delta_outflow_analyses/")
